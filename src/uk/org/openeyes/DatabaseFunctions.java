/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package uk.org.openeyes;

import java.io.File;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import org.hibernate.Criteria;
import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.Transaction;
import org.hibernate.boot.MetadataSources;
import org.hibernate.boot.registry.StandardServiceRegistry;
import org.hibernate.boot.registry.StandardServiceRegistryBuilder;
import org.hibernate.criterion.Disjunction;
import org.hibernate.criterion.Restrictions;
import uk.org.openeyes.models.Episode;
import uk.org.openeyes.models.Event;
import uk.org.openeyes.models.EventType;
import uk.org.openeyes.models.OphinbiometryImportedEvents;
import uk.org.openeyes.models.Patient;
import uk.org.openeyes.models.User;

/**
 *
 * @author VEDELEKT
 */
public class DatabaseFunctions {
    private SessionFactory sessionFactory;
    protected Patient selectedPatient;
    protected Episode selectedEpisode;
    protected Session session;
    protected Transaction transaction;
    protected User selectedUser;
    protected StudyData eventStudy;
    protected BiometryData eventBiometry;
    protected OphinbiometryImportedEvents importedBiometryEvent;
    protected boolean isNewEvent = true;
    
    protected User searchStudyUser(String userName){

        Criteria crit = session.createCriteria(User.class);
        Disjunction or = Restrictions.disjunction();
        
        User returnUser = null;
        
        String[] userNameArr = userName.split(" ");
        String lastName = "";
        
        // we cannot rely on the user name format coming from the dicom file!!!
        if(userNameArr.length == 1){
            lastName = "";
        }else{
            for(int i=1; i<userNameArr.length; i++){
                lastName += userNameArr[i]+" "; 
            }
        }
        crit.add(Restrictions.eq("firstName", userNameArr[0]));
        crit.add(Restrictions.eq("lastName", lastName));
        
        if(crit.list().isEmpty()){
            // we search for unknown user
            Criteria crit2 = session.createCriteria(User.class);
            crit2.add(Restrictions.eq("firstName", "Unknown"));
            crit2.add(Restrictions.eq("lastName", "IOLMaster"));
            
            if(crit2.list().isEmpty()){
                // we create the user
                returnUser = new User();
                returnUser.setUsername("UNKNOWN");
                returnUser.setFirstName("Unknown");
                returnUser.setLastName("IOLMaster");
                returnUser.setEmail("");
                returnUser.setActive(true);
                returnUser.setGlobalFirmRights(false);
                returnUser.setTitle("N/A");
                returnUser.setQualifications("Generated by IOLMaster import");
                returnUser.setRole("Import");
                returnUser.setLastModifiedUserId(new User(1));
                returnUser.setLastModifiedDate(new Date());
                returnUser.setCreatedUserId(new User(1));
                returnUser.setCreatedDate(new Date());
                returnUser.setIsClinical(false);
                returnUser.setIsDoctor(false);
                returnUser.setIsConsultant(false);
                returnUser.setIsSurgeon(false);
                returnUser.setHasSelectedFirms(false);
                session.save(returnUser);
            }else{
                returnUser = (User) crit2.list().get(0);
            }
            
        }else{
            returnUser = (User) crit.list().get(0);
        }
        return returnUser;
    }
    
    
    public void initSessionFactory(String configFile){
        // A SessionFactory is set up once for an application!
        // if no config specified we should use the default one
        
        // TODO: need to check for /etc/openeyes/db.conf here!!
        
        String defaultConfig = "resources/hibernate.cfg.xml";
        File inputFile = null;
        final StandardServiceRegistry registry;
                
        if( ! configFile.equals("")){
           inputFile = new File(configFile);
        }
        
        if( inputFile != null){
            registry = new StandardServiceRegistryBuilder()
                        .configure(inputFile) // configures settings from hibernate.cfg.xml
                        .build();
        }else{
            registry = new StandardServiceRegistryBuilder()
                        .configure(defaultConfig) // configures settings from hibernate.cfg.xml
                        .build();
        }
        
        try {
            sessionFactory = new MetadataSources( registry ).buildMetadata().buildSessionFactory();
        }
        catch (Exception e) {
            // The registry would be destroyed by the SessionFactory, but we had trouble building the SessionFactory
            // so destroy it manually.
            System.out.println("Failed to connect to the database, please check your hibernate configuration file!");
            
            // TODO: need to add debug config here!
            e.printStackTrace();
            StandardServiceRegistryBuilder.destroy( registry );
        }
    }
    
    public boolean checkConnection(){
        Session session = sessionFactory.openSession();
        return session.isConnected();
    }
    
    public void closeSessionFactory(){
        if ( sessionFactory != null ) {
            sessionFactory.close();
	}
    }
    
    public Patient getSelectedPatient(){
        return this.selectedPatient;
    }
    
    public void searchPatient(String hosNum, char gender, Calendar birthDate){
        Session session = sessionFactory.openSession();
        Criteria crit = session.createCriteria(Patient.class);
        crit.add(Restrictions.eq("hosNum",hosNum));
        // we should search for M or F only
        if( Character.toString(gender).equals("F") || Character.toString(gender).equals("M")){
            crit.add(Restrictions.eq("gender", Character.toString(gender)));
        }
        crit.add(Restrictions.sqlRestriction("dob = '"+birthDate.get(Calendar.YEAR)+"-"+birthDate.get(Calendar.MONTH)+"-"+birthDate.get(Calendar.DAY_OF_MONTH)+"'"));
        List patientList = crit.list();
        
        if(patientList.isEmpty()){
            // TODO: How to handle this case??
            System.out.println("ERROR: Patient not found for the data specified (hos_num: "+hosNum+", gender: "+gender+", dob: "+birthDate.get(Calendar.YEAR)+"-"+birthDate.get(Calendar.MONTH)+"-"+birthDate.get(Calendar.DAY_OF_MONTH)+")");
        }else if(patientList.size() > 1){
            // TODO: How to handle this case??
            System.out.println("ERROR: More than 1 record found for patient (hos_num: "+hosNum+", gender: "+gender+", dob: "+birthDate.get(Calendar.YEAR)+"-"+birthDate.get(Calendar.MONTH)+"-"+birthDate.get(Calendar.DAY_OF_MONTH)+")");
        }else{
            // TODO: is everything OK?
            selectedPatient = (Patient) patientList.get(0);
        }
        if(selectedPatient != null){
            System.out.println("Selected patient: "+selectedPatient);
        }
        session.close();
    }
    
    public void selectActiveEpisode(){
        selectedEpisode = null;
        /*
        // New requirement: always follow the manual linking process, so this part has been removed
        if(this.selectedPatient != null){
            Session session = sessionFactory.openSession();
            Criteria episodeCrit = session.createCriteria(Episode.class);
            Criteria patientJoin = episodeCrit.createCriteria("patientId");

            patientJoin.add(Restrictions.eq("id", selectedPatient.getId()));
            episodeCrit.add(Restrictions.eq("deleted",0));
            Criteria episodeStatusJoin = episodeCrit.createCriteria("episodeStatusId");
            episodeStatusJoin.add(Restrictions.ne("name", "Discharged"));
            List episodesList = episodeCrit.list();

            if(episodesList.isEmpty()){
                System.out.println("ERROR: No open episodes found!");
            }else if(episodesList.size() != 1){
                System.out.println("ERROR: More than 1 open episodes found!");
            }else{
                selectedEpisode = (Episode) episodesList.get(0);
                System.out.println("Selected episode: "+selectedEpisode.toString());
            }
            
            session.close();
        }
        if(selectedEpisode == null){
            System.out.println("ERROR: No unique open episode found, will create data without episode!");
        }
        */
    }
    
    public Episode getSelectedEpisode(){
        return this.selectedEpisode;        
    }
    
    /**
    *
    * 
    **/
    public String getStudyYMD(Calendar studyDate) {
        String formattedStudyDate = String.format("%04d-%02d-%02d %02d:%02d:%02d",
                studyDate.get(Calendar.YEAR),
                studyDate.get(Calendar.MONTH),
                studyDate.get(Calendar.DAY_OF_MONTH),
                studyDate.get(Calendar.HOUR_OF_DAY),
                studyDate.get(Calendar.MINUTE),
                studyDate.get(Calendar.SECOND)
        );
        return formattedStudyDate;
    }
    
    protected Event createNewEvent(){
        Event newBiometryEvent = new Event();
        
        System.out.println("Starting event...");
        if(this.selectedEpisode != null){
            newBiometryEvent.setEpisodeId(selectedEpisode);
        }else{
            newBiometryEvent.setEpisodeId(null);
        }
        newBiometryEvent.setCreatedUserId(selectedUser);
        // search for event type name "Biometry"
        Criteria eventTypeCrit = session.createCriteria(EventType.class);
        eventTypeCrit.add(Restrictions.eq("name", "Biometry"));
        newBiometryEvent.setEventTypeId((EventType) eventTypeCrit.list().get(0));
        newBiometryEvent.setCreatedDate(new Date());
        newBiometryEvent.setLastModifiedDate(new Date());
        newBiometryEvent.setLastModifiedUserId(selectedUser);

        // TODO: need to check, because it display one month more!!!!
        DateFormat df = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss"); 
        try {
            newBiometryEvent.setEventDate(df.parse(getStudyYMD(eventStudy.getStudyDateTime())));
        } catch (ParseException ex) {
            Logger.getLogger(DatabaseFunctions.class.getName()).log(Level.SEVERE, null, ex);
        }

        // let's save it!
        // 1. create new event
        session.save(newBiometryEvent);
        System.out.println("Event saved...");
        
        return newBiometryEvent;
    }
    

    // for unit testing it need to be public
    public void setSession(){
        this.session = sessionFactory.openSession();
    }
    
    private Session getSession(){
        return this.session;
    }
    
    // for unit testing it need to be public
    public void setTransaction(){
        if(session == null){
            this.setSession();
        }
        this.transaction = session.beginTransaction();
    }
    
    private Transaction getTransaction(){
        return this.transaction;
    }
    
    // for unit testing it need to be public
    public void setEventStudy(StudyData inputStudy){
        this.eventStudy = inputStudy;
    }
    
    private StudyData getEventStudy(){
        return this.eventStudy;
    }
    
    // for unit testing it need to be public
    public void setEventBiometry(BiometryData inputBiometry){
        this.eventBiometry = inputBiometry;
    }
    
    private BiometryData getEventBiometry(){
        return this.eventBiometry;
    }
    
    // for unit testing it need to be public
    public void setSelectedUser(){
        if(eventStudy != null){
            String SurgeonName="";
            if(eventStudy.getSurgeonName() != null){
                SurgeonName = eventStudy.getSurgeonName();
            }
            this.selectedUser = searchStudyUser(SurgeonName);
        }
    }
    
    
   
    public void logAuditData(){
        Session session = sessionFactory.openSession();
        Transaction transaction = session.beginTransaction();
        
    }

}
